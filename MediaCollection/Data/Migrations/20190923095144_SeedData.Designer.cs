// <auto-generated />
using System;
using MediaCollection.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MediaCollection.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190923095144_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MediaCollection.Domain.Film.AfspeellijstFilm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("AfspeellijstFilms");
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Beschrijving");

                    b.Property<byte[]>("Foto");

                    b.Property<int>("Speelduur");

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmAfspeellijst", b =>
                {
                    b.Property<int>("AfspeellijstId");

                    b.Property<string>("UserId");

                    b.Property<int>("FilmId");

                    b.HasKey("AfspeellijstId", "UserId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmAfspeellijsten");
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmFavorite", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("FilmId");

                    b.HasKey("UserId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmFavoriten");
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmGenre", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<int>("GenreId");

                    b.HasKey("FilmId", "GenreId");

                    b.ToTable("FilmGenres");
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmGezienStatus", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<string>("UserId");

                    b.Property<int>("GezienStatusId");

                    b.HasKey("FilmId", "UserId");

                    b.ToTable("FilmGezienStatuses");
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmRegisseur", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<int>("RegisseurId");

                    b.HasKey("FilmId", "RegisseurId");

                    b.ToTable("FilmRegisseurs");
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmReview", b =>
                {
                    b.Property<int>("FilmId");

                    b.Property<int>("UserId");

                    b.Property<string>("Review");

                    b.Property<string>("ReviewTitel");

                    b.Property<int>("Score");

                    b.HasKey("FilmId", "UserId");

                    b.ToTable("FilmReviews");
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.GenreFilm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genrenaam");

                    b.HasKey("Id");

                    b.ToTable("GenreFilms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Genrenaam = "Actie"
                        },
                        new
                        {
                            Id = 2,
                            Genrenaam = "Avontuur"
                        },
                        new
                        {
                            Id = 3,
                            Genrenaam = "Fantasy"
                        },
                        new
                        {
                            Id = 4,
                            Genrenaam = "Thriller"
                        },
                        new
                        {
                            Id = 5,
                            Genrenaam = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            Genrenaam = "Western"
                        },
                        new
                        {
                            Id = 7,
                            Genrenaam = "Musical"
                        },
                        new
                        {
                            Id = 8,
                            Genrenaam = "Drama"
                        },
                        new
                        {
                            Id = 9,
                            Genrenaam = "Oorlog"
                        },
                        new
                        {
                            Id = 10,
                            Genrenaam = "Romance"
                        },
                        new
                        {
                            Id = 11,
                            Genrenaam = "Historisch"
                        });
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.GezienStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("GezienStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Nog niet gezien"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Gezien"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Wil ik zien"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Wil ik niet zien"
                        });
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.Regisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("Regisseurs");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.AfspeellijstNummer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("AfspeellijstNummers");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AlbumFoto");

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.Artiest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("Artiesten");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.GeluisterdStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("GeluisterdStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Nog niet geluisterd"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Al geluisterd"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Wil ik luisteren"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Wil ik niet luisteren"
                        });
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.GenreNummer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("GenreNummers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naam = "Pop"
                        },
                        new
                        {
                            Id = 2,
                            Naam = "Jazz"
                        },
                        new
                        {
                            Id = 3,
                            Naam = "Rock"
                        },
                        new
                        {
                            Id = 4,
                            Naam = "Metal"
                        },
                        new
                        {
                            Id = 5,
                            Naam = "Drum 'n bass"
                        },
                        new
                        {
                            Id = 6,
                            Naam = "Dubstep"
                        },
                        new
                        {
                            Id = 7,
                            Naam = "Dance"
                        },
                        new
                        {
                            Id = 8,
                            Naam = "Electronic"
                        });
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.Nummer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlbumId");

                    b.Property<string>("Naam");

                    b.Property<int>("Speeltijd");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Nummers");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerAfspeellijst", b =>
                {
                    b.Property<int>("AfspeellijstId");

                    b.Property<int>("NummerId");

                    b.Property<string>("UserId");

                    b.HasKey("AfspeellijstId", "NummerId", "UserId");

                    b.HasIndex("NummerId");

                    b.ToTable("NummerAfspeellijsten");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerAlbum", b =>
                {
                    b.Property<int>("AlbumId");

                    b.Property<int>("NummerId");

                    b.HasKey("AlbumId", "NummerId");

                    b.HasIndex("NummerId");

                    b.ToTable("NummerAlbums");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerArtiest", b =>
                {
                    b.Property<int>("ArtiestId");

                    b.Property<int>("NummerId");

                    b.HasKey("ArtiestId", "NummerId");

                    b.HasIndex("NummerId");

                    b.ToTable("NummerArtiesten");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerFavorite", b =>
                {
                    b.Property<int>("NummerId");

                    b.Property<string>("UserId");

                    b.HasKey("NummerId", "UserId");

                    b.ToTable("NummerFavorite");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerGeluisterdStatus", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("NummerId");

                    b.Property<int>("GeluisterdId");

                    b.HasKey("UserId", "NummerId");

                    b.HasIndex("NummerId");

                    b.ToTable("NummerGeluisterdStatuses");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerGenre", b =>
                {
                    b.Property<int>("GenreId");

                    b.Property<int>("NummerId");

                    b.HasKey("GenreId", "NummerId");

                    b.HasIndex("NummerId");

                    b.ToTable("NummerGenres");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerReview", b =>
                {
                    b.Property<int>("NummerId");

                    b.Property<string>("UserId");

                    b.Property<string>("Review");

                    b.Property<int>("Score");

                    b.Property<string>("Titel");

                    b.HasKey("NummerId", "UserId");

                    b.ToTable("NummerReviews");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.AfspeellijstPodcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("AfspeellijstPodcasts");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.Auteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("Auteurs");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.GehoordStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("GehoordStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Nog niet geluisterd"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Al geluisterd"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Wil ik luisteren"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Wil ik niet luisteren"
                        });
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.Podcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.ToTable("Podcasts");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastAflevering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GuestId");

                    b.Property<int>("PodcastId");

                    b.Property<string>("Titel");

                    b.HasKey("Id");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastAfleveringen");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastAfspeellijst", b =>
                {
                    b.Property<int>("AfspeellijstId");

                    b.Property<int>("PodcastId");

                    b.Property<string>("UserId");

                    b.HasKey("AfspeellijstId", "PodcastId", "UserId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastAfspeellijsten");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastAuteur", b =>
                {
                    b.Property<int>("AuteurId");

                    b.Property<int>("PodcastId");

                    b.HasKey("AuteurId", "PodcastId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastAuteur");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastFavorite", b =>
                {
                    b.Property<int>("PodcastId");

                    b.Property<string>("UserId");

                    b.HasKey("PodcastId", "UserId");

                    b.ToTable("PodcastFavorites");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastGehoordStatus", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("PodcastId");

                    b.Property<int>("GehoordStatus");

                    b.HasKey("UserId", "PodcastId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastGehoordStatuses");
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastReview", b =>
                {
                    b.Property<int>("PodcastAfleveringId");

                    b.Property<string>("UserId");

                    b.Property<int?>("PodcastId");

                    b.Property<string>("Review");

                    b.Property<int>("Score");

                    b.Property<string>("Titel");

                    b.HasKey("PodcastAfleveringId", "UserId");

                    b.HasIndex("PodcastId");

                    b.ToTable("PodcastReviews");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.AfspeellijstSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("AfspeellijstSeries");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.BekekenStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("BekekenStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Nog niet gezien"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Gezien"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Wil ik zien"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Wil ik niet zien"
                        });
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.GenreSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreNaam");

                    b.HasKey("Id");

                    b.ToTable("GenreSeries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreNaam = "Actie"
                        },
                        new
                        {
                            Id = 2,
                            GenreNaam = "Avontuur"
                        },
                        new
                        {
                            Id = 3,
                            GenreNaam = "Fantasy"
                        },
                        new
                        {
                            Id = 4,
                            GenreNaam = "Thriller"
                        },
                        new
                        {
                            Id = 5,
                            GenreNaam = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            GenreNaam = "Western"
                        },
                        new
                        {
                            Id = 7,
                            GenreNaam = "Musical"
                        },
                        new
                        {
                            Id = 8,
                            GenreNaam = "Drama"
                        },
                        new
                        {
                            Id = 9,
                            GenreNaam = "Oorlog"
                        },
                        new
                        {
                            Id = 10,
                            GenreNaam = "Romance"
                        },
                        new
                        {
                            Id = 11,
                            GenreNaam = "Historisch"
                        });
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.RegisseurSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("RegisseurSeries");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Foto");

                    b.Property<string>("Naam");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieAflevering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SerieId");

                    b.Property<int>("Titel");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("SerieAfleveringen");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieAfspeellijst", b =>
                {
                    b.Property<int>("AfspeellijstId");

                    b.Property<int>("SerieId");

                    b.Property<string>("UserId");

                    b.HasKey("AfspeellijstId", "SerieId", "UserId");

                    b.ToTable("SerieAfspeellijsten");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieBekekenStatus", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("BekekenStatusId");

                    b.Property<int?>("SerieId");

                    b.HasKey("UserId", "BekekenStatusId");

                    b.HasIndex("SerieId");

                    b.ToTable("SerieBekekenStatuses");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieFavorite", b =>
                {
                    b.Property<int>("SerieId");

                    b.Property<string>("UserId");

                    b.HasKey("SerieId", "UserId");

                    b.ToTable("SerieFavorites");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieGenre", b =>
                {
                    b.Property<int>("SerieId");

                    b.Property<int>("GenreId");

                    b.HasKey("SerieId", "GenreId");

                    b.ToTable("SerieGenres");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieRegisseur", b =>
                {
                    b.Property<int>("RegisseurId");

                    b.Property<int>("SerieId");

                    b.HasKey("RegisseurId", "SerieId");

                    b.HasIndex("SerieId");

                    b.ToTable("SerieRegisseurs");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieReview", b =>
                {
                    b.Property<int>("SerieId");

                    b.Property<string>("UserId");

                    b.Property<string>("Review");

                    b.Property<int>("Score");

                    b.Property<string>("Titel");

                    b.HasKey("SerieId", "UserId");

                    b.ToTable("SerieReviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmAfspeellijst", b =>
                {
                    b.HasOne("MediaCollection.Domain.Film.Film")
                        .WithMany("FilmAfspeellijsten")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmFavorite", b =>
                {
                    b.HasOne("MediaCollection.Domain.Film.Film")
                        .WithMany("FilmFavorites")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmGenre", b =>
                {
                    b.HasOne("MediaCollection.Domain.Film.Film")
                        .WithMany("Genres")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmGezienStatus", b =>
                {
                    b.HasOne("MediaCollection.Domain.Film.Film")
                        .WithMany("FilmGezienStatuses")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmRegisseur", b =>
                {
                    b.HasOne("MediaCollection.Domain.Film.Film")
                        .WithMany("Regisseurs")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Film.FilmReview", b =>
                {
                    b.HasOne("MediaCollection.Domain.Film.Film")
                        .WithMany("Reviews")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.Nummer", b =>
                {
                    b.HasOne("MediaCollection.Domain.Muziek.Album")
                        .WithMany("Nummers")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerAfspeellijst", b =>
                {
                    b.HasOne("MediaCollection.Domain.Muziek.Nummer")
                        .WithMany("NummerAfspeellijsten")
                        .HasForeignKey("NummerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerAlbum", b =>
                {
                    b.HasOne("MediaCollection.Domain.Muziek.Nummer")
                        .WithMany("NummerAlbums")
                        .HasForeignKey("NummerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerArtiest", b =>
                {
                    b.HasOne("MediaCollection.Domain.Muziek.Nummer")
                        .WithMany("NummerArtiests")
                        .HasForeignKey("NummerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerFavorite", b =>
                {
                    b.HasOne("MediaCollection.Domain.Muziek.Nummer")
                        .WithMany("NummerFavorites")
                        .HasForeignKey("NummerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerGeluisterdStatus", b =>
                {
                    b.HasOne("MediaCollection.Domain.Muziek.Nummer")
                        .WithMany("NummerGeluisterdStatuses")
                        .HasForeignKey("NummerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerGenre", b =>
                {
                    b.HasOne("MediaCollection.Domain.Muziek.Nummer")
                        .WithMany("NummerGenres")
                        .HasForeignKey("NummerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Muziek.NummerReview", b =>
                {
                    b.HasOne("MediaCollection.Domain.Muziek.Nummer")
                        .WithMany("NummerReviews")
                        .HasForeignKey("NummerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastAflevering", b =>
                {
                    b.HasOne("MediaCollection.Domain.Podcast.Podcast")
                        .WithMany("PodcastAfleveringen")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastAfspeellijst", b =>
                {
                    b.HasOne("MediaCollection.Domain.Podcast.Podcast")
                        .WithMany("PodcastAfspeellijsten")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastAuteur", b =>
                {
                    b.HasOne("MediaCollection.Domain.Podcast.Podcast")
                        .WithMany("PodcastAuteurs")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastFavorite", b =>
                {
                    b.HasOne("MediaCollection.Domain.Podcast.Podcast")
                        .WithMany("PodcastFavorites")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastGehoordStatus", b =>
                {
                    b.HasOne("MediaCollection.Domain.Podcast.Podcast")
                        .WithMany("PodcastGehoordStatuses")
                        .HasForeignKey("PodcastId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Podcast.PodcastReview", b =>
                {
                    b.HasOne("MediaCollection.Domain.Podcast.Podcast")
                        .WithMany("Reviews")
                        .HasForeignKey("PodcastId");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieAflevering", b =>
                {
                    b.HasOne("MediaCollection.Domain.Serie.Serie")
                        .WithMany("SerieAfleveringen")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieBekekenStatus", b =>
                {
                    b.HasOne("MediaCollection.Domain.Serie.Serie")
                        .WithMany("SerieBekekenStatuses")
                        .HasForeignKey("SerieId");
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieFavorite", b =>
                {
                    b.HasOne("MediaCollection.Domain.Serie.Serie")
                        .WithMany("SerieFavorites")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieGenre", b =>
                {
                    b.HasOne("MediaCollection.Domain.Serie.Serie")
                        .WithMany("SerieGenres")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieRegisseur", b =>
                {
                    b.HasOne("MediaCollection.Domain.Serie.Serie")
                        .WithMany("SerieRegisseurs")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MediaCollection.Domain.Serie.SerieReview", b =>
                {
                    b.HasOne("MediaCollection.Domain.Serie.Serie")
                        .WithMany("SerieReviews")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
